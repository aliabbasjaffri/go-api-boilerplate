package main

import (
	"context"
	"fmt"
	"github.com/aliabbasjaffri/go-api-boilerplate/controller"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func waitForShutdown(server *http.Server) {
	//creating interruption channel
	interruptChan := make(chan os.Signal, 1)

	//creating signal notification on SIGINT and SIGTERM
	signal.Notify(interruptChan, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

	//blocking interruption until signal received
	//which can be generated by pressing control+c
	<-interruptChan

	//creating waiting deadline
	_context, cancel := context.WithTimeout(context.Background(), 5 * time.Second)
	defer cancel()

	//shutting down server
	if err := server.Shutdown(_context); err != nil {
		fmt.Print("Error while shutting down server.")
		log.Fatal(err)
	}
	//exiting application...
	log.Print("Shutting down server")
	os.Exit(0)
}

func main () {
	//creating a mux router
	//with endpoints
	router := mux.NewRouter()
	router.HandleFunc("/", controller.GetAllUsers).Methods("GET")
	router.HandleFunc("/getusers", controller.GetAllUsers).Methods("GET")
	router.HandleFunc("/adduser", controller.CreateUser).Methods("POST")
	router.HandleFunc("/updateuser", controller.UpdateUser).Methods("PUT")
	router.HandleFunc("/deleteuser", controller.DeleteUser).Methods("DELETE")

	//creating server with timeouts
	server := &http.Server {
		Handler:      router,
		Addr:         ":9090",
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 5 * time.Second,
	}

	//starting a concurrent go server
	go func() {
		fmt.Print("Starting the API")
		if err := server.ListenAndServe(); err != nil {
			fmt.Print("Unable to start router at port: 9090")
			log.Fatal(err)
		}
	}()

	//waiting for server shutdown
	waitForShutdown(server)
}